TODO:

Backend Module:
	- List:
		- Show <title> content?
		- overview of pages-section table.
		- tracking pages which are shown non-cached
		- Limitation to number of pages selected at once (run-away brake) for a single page.
	- View entry:
		- Support in frontend for viewing the entry (may require that the page cache table is enriched with recording of incoming URL! - but even then we have to submit the hash-string because it can depend on other factors as well)
			- A hook in tslib_fe can easily be used to look up a cache entry based on a hash string and just display the page (with no dynamic inserted content eg.)
	- Comparison:
		- Compare two entries to see what the difference are in terms of parameters used to generate the hash
		- Compare page content.
	- Flush:
		- Clear cache per entry/regX-group/page/branch
		- Entries older than XX days
	- Update [Requires "crawler" extension]:
		- Flag entries for re-caching, which is done by a crawler but doesn't affect site performance.
	- Cache site [Requires "crawler" extension]:
		- Activates crawler to visit all pages/parameter combinations

	Various details:
		- Record the time it takes to flush / update etc.

API:
- cache_pages -> API for adding reg1/reg2 [varchar? - JH] custom content!
- automatic clear-pages cache protection / API? (global flag / t3lib_div-function?)
	- "clear-cache" might not DELETE records but rather mark them "update-cache" or something like that... (would require the URL to be around...)
	- protect-flag which will disable the *automatic* clearing of page cache for a single page (in page header; expiry set to never -> setting flag in "cache_pages" table and records with that flag set cannot be flushed!)
- ""key1" and "key2" for granularity in caching!
	-> used in manual clear-cache situations from backend flush
	-> used in configurable clear-cache situations (clearing cache for a single document on TYPO3.org!)
- "registerElement" per page for cache clearing (frontend scripts; function puts record reference in internal array and writes to disk only when cache table is written too! Flushes table with cache table also! Just like cache_pagessection)
	-> For TV: ->registerElement('tt_content','uid'); when elements are NOT on the physical page
	-> For 3dsplm: ->registerElement('bfs_brand','catia')
	-> For 3dsplm: ->registerElement('bfs_skills','')	[saying that ANY bfs_skill changed will clear cache of front-page where all are shown.]
- &no_cache can be disabled (allows DoS attacks!)
- cHash problems?
